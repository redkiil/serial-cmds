
debounce.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  0000015e  000001f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000015e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000040  0080010e  0080010e  00000200  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000230  2**2
                  CONTENTS, READONLY
  5 .debug_info   000005f4  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005a2  00000000  00000000  00000864  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000133  00000000  00000000  00000e06  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000208  00000000  00000000  00000f39  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e5       	ldi	r30, 0x5E	; 94
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e0       	ldi	r26, 0x0E	; 14
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 34       	cpi	r26, 0x4E	; 78
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 78 00 	call	0xf0	; 0xf0 <main>
  9e:	0c 94 ad 00 	jmp	0x15a	; 0x15a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <UART_sendChar>:
  a6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
  aa:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
  ae:	85 ff       	sbrs	r24, 5
  b0:	fc cf       	rjmp	.-8      	; 0xaa <UART_sendChar+0x4>
  b2:	08 95       	ret

000000b4 <UART_sendString>:
  b4:	cf 93       	push	r28
  b6:	df 93       	push	r29
  b8:	ec 01       	movw	r28, r24
  ba:	88 81       	ld	r24, Y
  bc:	88 23       	and	r24, r24
  be:	21 f0       	breq	.+8      	; 0xc8 <UART_sendString+0x14>
  c0:	0e 94 53 00 	call	0xa6	; 0xa6 <UART_sendChar>
  c4:	19 92       	st	Y+, r1
  c6:	f9 cf       	rjmp	.-14     	; 0xba <UART_sendString+0x6>
  c8:	df 91       	pop	r29
  ca:	cf 91       	pop	r28
  cc:	08 95       	ret

000000ce <UART_receiveString>:
  ce:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
  d2:	fc 01       	movw	r30, r24
  d4:	27 ff       	sbrs	r18, 7
  d6:	0a c0       	rjmp	.+20     	; 0xec <UART_receiveString+0x1e>
  d8:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
  dc:	87 ff       	sbrs	r24, 7
  de:	fc cf       	rjmp	.-8      	; 0xd8 <UART_receiveString+0xa>
  e0:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
  e4:	81 93       	st	Z+, r24
  e6:	8a 30       	cpi	r24, 0x0A	; 10
  e8:	b9 f7       	brne	.-18     	; 0xd8 <UART_receiveString+0xa>
  ea:	08 95       	ret
  ec:	10 82       	st	Z, r1
  ee:	08 95       	ret

000000f0 <main>:
  f0:	20 9a       	sbi	0x04, 0	; 4
  f2:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
  f6:	87 e6       	ldi	r24, 0x67	; 103
  f8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
  fc:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 100:	86 60       	ori	r24, 0x06	; 6
 102:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 106:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
 10a:	88 61       	ori	r24, 0x18	; 24
 10c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
 110:	8e e0       	ldi	r24, 0x0E	; 14
 112:	91 e0       	ldi	r25, 0x01	; 1
 114:	0e 94 67 00 	call	0xce	; 0xce <UART_receiveString>
 118:	60 e0       	ldi	r22, 0x00	; 0
 11a:	71 e0       	ldi	r23, 0x01	; 1
 11c:	8e e0       	ldi	r24, 0x0E	; 14
 11e:	91 e0       	ldi	r25, 0x01	; 1
 120:	0e 94 a4 00 	call	0x148	; 0x148 <strcmp>
 124:	89 2b       	or	r24, r25
 126:	11 f4       	brne	.+4      	; 0x12c <main+0x3c>
 128:	28 9a       	sbi	0x05, 0	; 5
 12a:	09 c0       	rjmp	.+18     	; 0x13e <main+0x4e>
 12c:	65 e0       	ldi	r22, 0x05	; 5
 12e:	71 e0       	ldi	r23, 0x01	; 1
 130:	8e e0       	ldi	r24, 0x0E	; 14
 132:	91 e0       	ldi	r25, 0x01	; 1
 134:	0e 94 a4 00 	call	0x148	; 0x148 <strcmp>
 138:	89 2b       	or	r24, r25
 13a:	09 f4       	brne	.+2      	; 0x13e <main+0x4e>
 13c:	28 98       	cbi	0x05, 0	; 5
 13e:	8e e0       	ldi	r24, 0x0E	; 14
 140:	91 e0       	ldi	r25, 0x01	; 1
 142:	0e 94 5a 00 	call	0xb4	; 0xb4 <UART_sendString>
 146:	e4 cf       	rjmp	.-56     	; 0x110 <main+0x20>

00000148 <strcmp>:
 148:	fb 01       	movw	r30, r22
 14a:	dc 01       	movw	r26, r24
 14c:	8d 91       	ld	r24, X+
 14e:	01 90       	ld	r0, Z+
 150:	80 19       	sub	r24, r0
 152:	01 10       	cpse	r0, r1
 154:	d9 f3       	breq	.-10     	; 0x14c <strcmp+0x4>
 156:	99 0b       	sbc	r25, r25
 158:	08 95       	ret

0000015a <_exit>:
 15a:	f8 94       	cli

0000015c <__stop_program>:
 15c:	ff cf       	rjmp	.-2      	; 0x15c <__stop_program>
