
debounce.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000152  000001e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000152  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800106  00800106  000001ec  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000021c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000728  00000000  00000000  0000027c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000692  00000000  00000000  000009a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000252  00000000  00000000  00001036  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  00001288  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000035f  00000000  00000000  000012ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000018  00000000  00000000  0000160b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001623  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e5       	ldi	r30, 0x52	; 82
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e0       	ldi	r26, 0x06	; 6
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 31       	cpi	r26, 0x12	; 18
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 a7 00 	jmp	0x14e	; 0x14e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
int i = 0;
char buffer[10];

int main()
{
	DDRB |= (1<<PINB0);
  a6:	20 9a       	sbi	0x04, 0	; 4
	unsigned int ubrr = MYUBRR;
	char ReceivedByte;
	UBRR0H = (ubrr>>8);
  a8:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
	UBRR0L = (ubrr);
  ac:	87 e6       	ldi	r24, 0x67	; 103
  ae:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	
	UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);
  b2:	e2 ec       	ldi	r30, 0xC2	; 194
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	86 60       	ori	r24, 0x06	; 6
  ba:	80 83       	st	Z, r24
	UCSR0B |= (1<<RXEN0)|(1<<TXEN0);
  bc:	e1 ec       	ldi	r30, 0xC1	; 193
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	80 81       	ld	r24, Z
  c2:	88 61       	ori	r24, 0x18	; 24
  c4:	80 83       	st	Z, r24
	
	while (1)
	{
		i=0; 
		while (!(UCSR0A & (1 << RXC0)) == 0) {
  c6:	c0 ec       	ldi	r28, 0xC0	; 192
  c8:	d0 e0       	ldi	r29, 0x00	; 0
			buffer[i] = UDR0;
  ca:	06 ec       	ldi	r16, 0xC6	; 198
  cc:	10 e0       	ldi	r17, 0x00	; 0
			i++;
		}
		if(!strcmp("L",buffer)){
			PORTB ^= (1<<PINB0);
  ce:	ff 24       	eor	r15, r15
  d0:	f3 94       	inc	r15
	UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);
	UCSR0B |= (1<<RXEN0)|(1<<TXEN0);
	
	while (1)
	{
		i=0; 
  d2:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <__data_end+0x1>
  d6:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <__data_end>
		while (!(UCSR0A & (1 << RXC0)) == 0) {
  da:	88 81       	ld	r24, Y
  dc:	88 23       	and	r24, r24
  de:	94 f4       	brge	.+36     	; 0x104 <main+0x5e>
			buffer[i] = UDR0;
  e0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
  e4:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <__data_end+0x1>
  e8:	d8 01       	movw	r26, r16
  ea:	2c 91       	ld	r18, X
  ec:	fc 01       	movw	r30, r24
  ee:	e8 5f       	subi	r30, 0xF8	; 248
  f0:	fe 4f       	sbci	r31, 0xFE	; 254
  f2:	20 83       	st	Z, r18
			i++;
  f4:	01 96       	adiw	r24, 0x01	; 1
  f6:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x1>
  fa:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
	UCSR0B |= (1<<RXEN0)|(1<<TXEN0);
	
	while (1)
	{
		i=0; 
		while (!(UCSR0A & (1 << RXC0)) == 0) {
  fe:	88 81       	ld	r24, Y
 100:	88 23       	and	r24, r24
 102:	74 f3       	brlt	.-36     	; 0xe0 <main+0x3a>
			buffer[i] = UDR0;
			i++;
		}
		if(!strcmp("L",buffer)){
 104:	68 e0       	ldi	r22, 0x08	; 8
 106:	71 e0       	ldi	r23, 0x01	; 1
 108:	83 e0       	ldi	r24, 0x03	; 3
 10a:	91 e0       	ldi	r25, 0x01	; 1
 10c:	0e 94 9e 00 	call	0x13c	; 0x13c <strcmp>
 110:	89 2b       	or	r24, r25
 112:	f9 f6       	brne	.-66     	; 0xd2 <main+0x2c>
			PORTB ^= (1<<PINB0);
 114:	85 b1       	in	r24, 0x05	; 5
 116:	8f 25       	eor	r24, r15
 118:	85 b9       	out	0x05, r24	; 5
 11a:	e0 e0       	ldi	r30, 0x00	; 0
 11c:	f1 e0       	ldi	r31, 0x01	; 1
 11e:	0a c0       	rjmp	.+20     	; 0x134 <main+0x8e>
			char *a = (1) ? "ON" : "OFF";
			while(*a){
				while(!(UCSR0A & (1<<UDRE0))==0)
				UDR0 = *a;
 120:	80 81       	ld	r24, Z
 122:	d8 01       	movw	r26, r16
 124:	8c 93       	st	X, r24
		}
		if(!strcmp("L",buffer)){
			PORTB ^= (1<<PINB0);
			char *a = (1) ? "ON" : "OFF";
			while(*a){
				while(!(UCSR0A & (1<<UDRE0))==0)
 126:	88 81       	ld	r24, Y
 128:	85 fd       	sbrc	r24, 5
 12a:	fa cf       	rjmp	.-12     	; 0x120 <main+0x7a>
				UDR0 = *a;
				a = a+1;
 12c:	31 96       	adiw	r30, 0x01	; 1
			i++;
		}
		if(!strcmp("L",buffer)){
			PORTB ^= (1<<PINB0);
			char *a = (1) ? "ON" : "OFF";
			while(*a){
 12e:	80 81       	ld	r24, Z
 130:	88 23       	and	r24, r24
 132:	79 f2       	breq	.-98     	; 0xd2 <main+0x2c>
				while(!(UCSR0A & (1<<UDRE0))==0)
 134:	88 81       	ld	r24, Y
 136:	85 fd       	sbrc	r24, 5
 138:	f3 cf       	rjmp	.-26     	; 0x120 <main+0x7a>
 13a:	f8 cf       	rjmp	.-16     	; 0x12c <main+0x86>

0000013c <strcmp>:
 13c:	fb 01       	movw	r30, r22
 13e:	dc 01       	movw	r26, r24
 140:	8d 91       	ld	r24, X+
 142:	01 90       	ld	r0, Z+
 144:	80 19       	sub	r24, r0
 146:	01 10       	cpse	r0, r1
 148:	d9 f3       	breq	.-10     	; 0x140 <strcmp+0x4>
 14a:	99 0b       	sbc	r25, r25
 14c:	08 95       	ret

0000014e <_exit>:
 14e:	f8 94       	cli

00000150 <__stop_program>:
 150:	ff cf       	rjmp	.-2      	; 0x150 <__stop_program>
