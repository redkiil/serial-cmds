
serialcmds.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000172  00000206  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000172  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000040  0080010e  0080010e  00000214  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000244  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000900  00000000  00000000  000002cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000703  00000000  00000000  00000bcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000033c  00000000  00000000  000012cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000094  00000000  00000000  0000160c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003d4  00000000  00000000  000016a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000025d  00000000  00000000  00001a74  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00001cd1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e7       	ldi	r30, 0x72	; 114
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e0       	ldi	r26, 0x0E	; 14
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 34       	cpi	r26, 0x4E	; 78
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 82 00 	call	0x104	; 0x104 <main>
  9e:	0c 94 b7 00 	jmp	0x16e	; 0x16e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <UART_sendChar>:
            UART_sendChar( '0' + temp);
        else
            UART_sendChar(  'A' + temp - 10);
        ch = ch << 4;    
     }   
}
  a6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
  aa:	e0 ec       	ldi	r30, 0xC0	; 192
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	85 ff       	sbrs	r24, 5
  b2:	fd cf       	rjmp	.-6      	; 0xae <UART_sendChar+0x8>
  b4:	08 95       	ret

000000b6 <UART_sendString>:
  b6:	cf 93       	push	r28
  b8:	df 93       	push	r29
  ba:	ec 01       	movw	r28, r24
  bc:	88 81       	ld	r24, Y
  be:	88 23       	and	r24, r24
  c0:	31 f0       	breq	.+12     	; 0xce <UART_sendString+0x18>
  c2:	0e 94 53 00 	call	0xa6	; 0xa6 <UART_sendChar>
  c6:	19 92       	st	Y+, r1
  c8:	88 81       	ld	r24, Y
  ca:	81 11       	cpse	r24, r1
  cc:	fa cf       	rjmp	.-12     	; 0xc2 <UART_sendString+0xc>
  ce:	df 91       	pop	r29
  d0:	cf 91       	pop	r28
  d2:	08 95       	ret

000000d4 <UART_receiveString>:
void UART_receiveString(char *buffering)
{
  d4:	cf 93       	push	r28
  d6:	df 93       	push	r29
	if((UCSR0A & (1<<RXC0)))
  d8:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
  dc:	22 23       	and	r18, r18
  de:	6c f4       	brge	.+26     	; 0xfa <UART_receiveString+0x26>
  e0:	dc 01       	movw	r26, r24
	{
		unsigned short idx = 0;
		unsigned char item = 'A';
		while(item != '\n'){
			while(!(UCSR0A & (1<<RXC0)));
  e2:	e0 ec       	ldi	r30, 0xC0	; 192
  e4:	f0 e0       	ldi	r31, 0x00	; 0
			item = UDR0;
  e6:	c6 ec       	ldi	r28, 0xC6	; 198
  e8:	d0 e0       	ldi	r29, 0x00	; 0
	if((UCSR0A & (1<<RXC0)))
	{
		unsigned short idx = 0;
		unsigned char item = 'A';
		while(item != '\n'){
			while(!(UCSR0A & (1<<RXC0)));
  ea:	90 81       	ld	r25, Z
  ec:	99 23       	and	r25, r25
  ee:	ec f7       	brge	.-6      	; 0xea <UART_receiveString+0x16>
			item = UDR0;
  f0:	98 81       	ld	r25, Y
			buffering[idx] = item;
  f2:	9d 93       	st	X+, r25
{
	if((UCSR0A & (1<<RXC0)))
	{
		unsigned short idx = 0;
		unsigned char item = 'A';
		while(item != '\n'){
  f4:	9a 30       	cpi	r25, 0x0A	; 10
  f6:	c9 f7       	brne	.-14     	; 0xea <UART_receiveString+0x16>
  f8:	02 c0       	rjmp	.+4      	; 0xfe <UART_receiveString+0x2a>
			item = UDR0;
			buffering[idx] = item;
			idx++;
		}
	}else{
		buffering[0] = '\0';
  fa:	fc 01       	movw	r30, r24
  fc:	10 82       	st	Z, r1
	}
  fe:	df 91       	pop	r29
 100:	cf 91       	pop	r28
 102:	08 95       	ret

00000104 <main>:

char buffer[64];

int main()
{
	DDRB |= (1<<PINB0);
 104:	20 9a       	sbi	0x04, 0	; 4
	unsigned int ubrr = MYUBRR;
	UBRR0H = (ubrr>>8);
 106:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
	UBRR0L = (ubrr);
 10a:	87 e6       	ldi	r24, 0x67	; 103
 10c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	
	UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);
 110:	e2 ec       	ldi	r30, 0xC2	; 194
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	80 81       	ld	r24, Z
 116:	86 60       	ori	r24, 0x06	; 6
 118:	80 83       	st	Z, r24
	UCSR0B |= (1<<RXEN0)|(1<<TXEN0);
 11a:	e1 ec       	ldi	r30, 0xC1	; 193
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	80 81       	ld	r24, Z
 120:	88 61       	ori	r24, 0x18	; 24
 122:	80 83       	st	Z, r24
	
	while (1)
	{
		UART_receiveString(buffer);
 124:	8e e0       	ldi	r24, 0x0E	; 14
 126:	91 e0       	ldi	r25, 0x01	; 1
 128:	0e 94 6a 00 	call	0xd4	; 0xd4 <UART_receiveString>
		if(!strcmp(buffer,"LED\n")){
 12c:	60 e0       	ldi	r22, 0x00	; 0
 12e:	71 e0       	ldi	r23, 0x01	; 1
 130:	8e e0       	ldi	r24, 0x0E	; 14
 132:	91 e0       	ldi	r25, 0x01	; 1
 134:	0e 94 ae 00 	call	0x15c	; 0x15c <strcmp>
 138:	89 2b       	or	r24, r25
 13a:	11 f4       	brne	.+4      	; 0x140 <main+0x3c>
			PORTB |= (1<<PINB0);
 13c:	28 9a       	sbi	0x05, 0	; 5
 13e:	09 c0       	rjmp	.+18     	; 0x152 <main+0x4e>
		}else if(!strcmp(buffer,"LEDOFF\n")){
 140:	65 e0       	ldi	r22, 0x05	; 5
 142:	71 e0       	ldi	r23, 0x01	; 1
 144:	8e e0       	ldi	r24, 0x0E	; 14
 146:	91 e0       	ldi	r25, 0x01	; 1
 148:	0e 94 ae 00 	call	0x15c	; 0x15c <strcmp>
 14c:	89 2b       	or	r24, r25
 14e:	09 f4       	brne	.+2      	; 0x152 <main+0x4e>
			PORTB &= ~(1<<PINB0);
 150:	28 98       	cbi	0x05, 0	; 5
		}
		
		UART_sendString(buffer);
 152:	8e e0       	ldi	r24, 0x0E	; 14
 154:	91 e0       	ldi	r25, 0x01	; 1
 156:	0e 94 5b 00 	call	0xb6	; 0xb6 <UART_sendString>
	}
 15a:	e4 cf       	rjmp	.-56     	; 0x124 <main+0x20>

0000015c <strcmp>:
 15c:	fb 01       	movw	r30, r22
 15e:	dc 01       	movw	r26, r24
 160:	8d 91       	ld	r24, X+
 162:	01 90       	ld	r0, Z+
 164:	80 19       	sub	r24, r0
 166:	01 10       	cpse	r0, r1
 168:	d9 f3       	breq	.-10     	; 0x160 <strcmp+0x4>
 16a:	99 0b       	sbc	r25, r25
 16c:	08 95       	ret

0000016e <_exit>:
 16e:	f8 94       	cli

00000170 <__stop_program>:
 170:	ff cf       	rjmp	.-2      	; 0x170 <__stop_program>
